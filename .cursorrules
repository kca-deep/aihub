# Linear Design System - Cursor Rules
# 이 파일은 웹사이트 제작 시 반드시 Linear Design System 테마와 컴포넌트를 사용하도록 강제합니다.

## 🎨 Design System Principles

### Linear Design System 사용 의무
- 모든 UI 컴포넌트는 반드시 `src/components/ui/` 디렉토리의 기존 컴포넌트를 사용해야 합니다
- 새로운 컴포넌트를 만들 때는 기존 컴포넌트의 패턴을 따라야 합니다
- Linear Design System의 색상, 타이포그래피, 간격 시스템을 엄격히 준수해야 합니다

### 색상 시스템 (Color System)
```typescript
// 반드시 사용해야 하는 색상들
brand: {
  primary: '#3B82F6', // 딥 블루 - 프라이머리 브랜드 색상
}
background: {
  primary: '#08090A',   // 메인 배경
  secondary: '#141516', // 보조 배경
  tertiary: '#0F1011',  // 3차 배경
}
surface: {
  primary: '#141516',   // 서피스 배경
  secondary: '#282830', // 보조 서피스
  tertiary: '#3E3E44',  // 3차 서피스
}
text: {
  primary: '#F7F8F8',   // 주요 텍스트
  secondary: 'rgba(255, 255, 255, 0.7)', // 보조 텍스트
  tertiary: '#8A8F98',  // 3차 텍스트
  muted: '#62626D',     // 무채색 텍스트
}
border: {
  primary: 'rgba(255, 255, 255, 0.08)', // 주요 보더
  secondary: '#23252A',                   // 보조 보더
}
```

### 타이포그래피 시스템 (Typography System)
```typescript
// 반드시 사용해야 하는 폰트 스타일들
fontFamily: {
  primary: '"Inter Variable", "SF Pro Display", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif'
}

// 헤딩 스타일
h1: { fontSize: '3.5rem', fontWeight: '538', lineHeight: '1.1' }
h2: { fontSize: '1.3125rem', fontWeight: '510', lineHeight: '1.33' }
h3: { fontSize: '1.3125rem', fontWeight: '510', lineHeight: '1.33' }
h4: { fontSize: '0.875rem', fontWeight: '510', lineHeight: '1.71' }

// 바디 텍스트 스타일
body-large: { fontSize: '1.3125rem', fontWeight: '510', lineHeight: '1.33' }
body-medium: { fontSize: '0.875rem', fontWeight: '510', lineHeight: '1.5' }
body-small: { fontSize: '0.8125rem', fontWeight: '510', lineHeight: '1.5' }
```

### 간격 시스템 (Spacing System)
```typescript
// 반드시 사용해야 하는 간격 값들
spacing: {
  xs: '0.25rem',    // 4px
  sm: '0.5rem',     // 8px
  md: '1rem',       // 16px
  lg: '1.5rem',     // 24px
  xl: '2rem',       // 32px
  '2xl': '3rem',    // 48px
  '3xl': '4rem',    // 64px
  '4xl': '6rem',    // 96px
}
```

## 🧩 Component Usage Rules

### 필수 컴포넌트 사용 규칙

#### 1. Typography 컴포넌트
```typescript
// 반드시 사용해야 하는 타이포그래피 컴포넌트
import { Heading, Text, Label } from '@/components/ui';

// 사용 예시
<Heading as="h1">메인 제목</Heading>
<Heading as="h2">섹션 제목</Heading>
<Text size="large">중요한 본문 텍스트</Text>
<Text size="medium">일반 본문 텍스트</Text>
<Text size="small">작은 텍스트</Text>
<Label htmlFor="input">라벨 텍스트</Label>
```

#### 2. Button 컴포넌트
```typescript
// 반드시 사용해야 하는 버튼 컴포넌트
import { Button } from '@/components/ui';

// 사용 예시
<Button variant="primary">주요 액션</Button>
<Button variant="secondary">보조 액션</Button>
<Button variant="ghost">고스트 버튼</Button>
<Button size="sm">작은 버튼</Button>
<Button size="large">큰 버튼</Button>
<Button loading>로딩 버튼</Button>
```

#### 3. Card 컴포넌트
```typescript
// 반드시 사용해야 하는 카드 컴포넌트
import { Card, CardHeader, CardContent, CardFooter } from '@/components/ui';

// 사용 예시
<Card>
  <CardHeader>
    <Heading as="h3">카드 제목</Heading>
  </CardHeader>
  <CardContent>
    <Text>카드 내용</Text>
  </CardContent>
  <CardFooter>
    <Button size="sm">액션</Button>
  </CardFooter>
</Card>
```

#### 4. Form 컴포넌트
```typescript
// 반드시 사용해야 하는 폼 컴포넌트들
import { Input, Textarea, Checkbox, Radio, Select } from '@/components/ui';

// 사용 예시
<Input variant="outlined" placeholder="입력하세요" />
<Textarea variant="filled" placeholder="메시지를 입력하세요" />
<Checkbox label="동의합니다" />
<Radio name="options" label="옵션 1" value="option1" />
<Select>
  <option value="">선택하세요</option>
  <option value="option1">옵션 1</option>
</Select>
```

#### 5. Hero 컴포넌트
```typescript
// 반드시 사용해야 하는 히어로 컴포넌트
import { Hero } from '@/components/ui';

// 사용 예시
<Hero
  variant="centered"
  title="메인 제목"
  description="설명 텍스트"
  primaryAction={{ label: "시작하기", onClick: () => {} }}
  secondaryAction={{ label: "자세히 보기", onClick: () => {} }}
/>
```

#### 6. ImageCard 컴포넌트
```typescript
// 반드시 사용해야 하는 이미지 카드 컴포넌트
import { ImageCard } from '@/components/ui';

// 사용 예시
<ImageCard
  image={{ src: "image.jpg", alt: "이미지 설명" }}
  title="카드 제목"
  description="카드 설명"
  badge="뱃지"
  hoverable
  clickable
/>
```

#### 7. Carousel 컴포넌트
```typescript
// 반드시 사용해야 하는 캐러셀 컴포넌트
import { Carousel } from '@/components/ui';

// 사용 예시
<Carousel
  items={carouselItems}
  autoPlay
  showArrows
  showDots
  variant="default"
/>
```

#### 8. Navigation 컴포넌트
```typescript
// 반드시 사용해야 하는 네비게이션 컴포넌트
import { Navigation } from '@/components/ui';

// 사용 예시
<Navigation
  items={[
    { label: 'Home', href: '/' },
    { label: 'Features', href: '/features' },
    { 
      label: 'Products', 
      href: '/products',
      children: [
        { label: 'Linear', href: '/products/linear' },
        { label: 'Design System', href: '/products/design-system' }
      ]
    }
  ]}
  actions={{
    primary: { label: 'Get Started', onClick: () => {} },
    secondary: { label: 'Sign In', onClick: () => {} }
  }}
  transparent
  sticky
/>
```

#### 9. Footer 컴포넌트
```typescript
// 반드시 사용해야 하는 푸터 컴포넌트
import { Footer } from '@/components/ui';

// 사용 예시
<Footer
  sections={[
    {
      title: 'Product',
      links: [
        { label: 'Features', href: '/features' },
        { label: 'Pricing', href: '/pricing' }
      ]
    },
    {
      title: 'Company',
      links: [
        { label: 'About', href: '/about' },
        { label: 'Contact', href: '/contact' }
      ]
    }
  ]}
  socialLinks={[
    {
      name: 'Twitter',
      href: 'https://twitter.com',
      icon: <TwitterIcon />
    }
  ]}
  newsletter={{
    title: 'Stay Updated',
    description: 'Get the latest updates.',
    onSubmit: (email) => console.log(email)
  }}
/>
```

## 🎯 Development Rules

### 1. 컴포넌트 임포트 규칙
```typescript
// 올바른 임포트 방식
import { 
  Button, 
  Card, 
  Heading, 
  Text, 
  Input, 
  Hero 
} from '@/components/ui';

// 잘못된 임포트 방식 (금지)
import Button from '@/components/ui/button';
import Card from '@/components/ui/card';
```

### 2. 스타일링 규칙
```typescript
// 올바른 스타일링 방식
import { cn } from '@/lib/utils';

const className = cn(
  'base-classes',
  {
    'conditional-class': condition,
    'another-class': anotherCondition,
  },
  'additional-classes'
);
```

### 3. 색상 사용 규칙
```typescript
// 올바른 색상 사용
className="bg-brand-primary text-text-primary border-border-primary"

// 잘못된 색상 사용 (금지)
className="bg-blue-500 text-white border-gray-300"
```

### 4. 간격 사용 규칙
```typescript
// 올바른 간격 사용
className="p-md m-lg gap-sm"

// 잘못된 간격 사용 (금지)
className="p-4 m-6 gap-2"
```

## 📁 File Structure Rules

### 필수 디렉토리 구조
```
src/
├── components/
│   └── ui/           # 모든 UI 컴포넌트
│       ├── button.tsx
│       ├── card.tsx
│       ├── typography.tsx
│       ├── input.tsx
│       ├── hero.tsx
│       ├── image-card.tsx
│       ├── carousel.tsx
│       └── index.ts
├── lib/
│   ├── theme.ts      # 테마 설정
│   └── utils.ts      # 유틸리티 함수
└── app/
    ├── globals.css   # 글로벌 스타일
    └── layout.tsx    # 루트 레이아웃
```

## 🔧 Configuration Rules

### Tailwind 설정 규칙
- `tailwind.config.js`의 색상 설정을 변경하지 마세요
- 새로운 색상을 추가할 때는 반드시 Linear Design System과 일치해야 합니다
- 기존 색상 값을 임의로 변경하지 마세요

### CSS 변수 규칙
- `src/app/globals.css`의 CSS 변수를 임의로 변경하지 마세요
- 새로운 CSS 변수를 추가할 때는 기존 패턴을 따라야 합니다

## 🚫 금지사항

### 1. 금지된 스타일링
```typescript
// 금지: 인라인 스타일
<div style={{ backgroundColor: 'blue', color: 'white' }}>

// 금지: 하드코딩된 색상
className="bg-blue-500 text-white"

// 금지: 커스텀 CSS 클래스 (Linear Design System 외)
className="custom-button custom-text"
```

### 2. 금지된 컴포넌트 사용
```typescript
// 금지: HTML 기본 요소 직접 사용
<h1>제목</h1>
<button>버튼</button>
<input type="text" />

// 금지: 다른 UI 라이브러리 사용
import { Button } from '@mui/material';
import { Button } from 'antd';
```

### 3. 금지된 파일 구조
```
// 금지: 컴포넌트를 다른 위치에 생성
src/components/Button.tsx
src/components/Card.tsx

// 금지: 테마 파일을 다른 위치에 생성
src/theme/colors.ts
src/styles/theme.ts
```

## ✅ 권장사항

### 1. 컴포넌트 확장 방법
```typescript
// 올바른 컴포넌트 확장 방법
interface CustomButtonProps extends ButtonProps {
  customProp?: string;
}

export const CustomButton = React.forwardRef<HTMLButtonElement, CustomButtonProps>(
  ({ customProp, ...props }, ref) => {
    return (
      <Button
        ref={ref}
        {...props}
        className={cn('custom-classes', props.className)}
      />
    );
  }
);
```

### 2. 새로운 컴포넌트 생성 방법
```typescript
// 새로운 컴포넌트 생성 시 패턴
import React from 'react';
import { cn } from '@/lib/utils';

export interface NewComponentProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: 'default' | 'custom';
  size?: 'sm' | 'md' | 'lg';
}

export const NewComponent = React.forwardRef<HTMLDivElement, NewComponentProps>(
  ({ className, variant = 'default', size = 'md', ...props }, ref) => {
    const baseClasses = cn(
      'base-styles',
      {
        'variant-styles': variant === 'custom',
        'size-styles': size === 'lg',
      },
      className
    );

    return (
      <div ref={ref} className={baseClasses} {...props}>
        {/* 컴포넌트 내용 */}
      </div>
    );
  }
);

NewComponent.displayName = 'NewComponent';
```

## 📝 코드 리뷰 체크리스트

새로운 코드를 작성할 때 다음 사항을 확인하세요:

- [ ] Linear Design System의 색상을 사용했는가?
- [ ] 기존 UI 컴포넌트를 사용했는가?
- [ ] 올바른 타이포그래피 컴포넌트를 사용했는가?
- [ ] Linear Design System의 간격 시스템을 사용했는가?
- [ ] 하드코딩된 색상이나 스타일이 없는가?
- [ ] 다른 UI 라이브러리를 사용하지 않았는가?
- [ ] 파일 구조가 올바른가?
- [ ] 컴포넌트가 재사용 가능한가?

## 🎨 Design System 철학

Linear Design System은 다음 원칙을 기반으로 합니다:

1. **일관성 (Consistency)**: 모든 컴포넌트가 동일한 디자인 언어를 사용
2. **접근성 (Accessibility)**: 모든 사용자가 접근할 수 있는 UI
3. **성능 (Performance)**: 최적화된 컴포넌트와 번들 크기
4. **유지보수성 (Maintainability)**: 명확한 구조와 문서화
5. **확장성 (Scalability)**: 새로운 기능을 쉽게 추가할 수 있는 구조

이 규칙들을 엄격히 준수하여 일관되고 세련된 웹사이트를 제작하세요. 